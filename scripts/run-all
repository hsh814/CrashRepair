#!/bin/bash
set -eu

export MEMORY_LIMIT="${MEMORY_LIMIT:-64g}"
export CPU_LIMIT="${CPU_LIMIT:-8}"
export REPAIR_TIME_LIMIT="${REPAIR_TIME_LIMIT:-45}"
export TEST_TIME_LIMIT="${TEST_TIME_LIMIT:-30}"
export PATCH_LIMIT="${PATCH_LIMIT:-40}"
export REPETITIONS="${REPETITIONS:-30}"

HERE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
EXPERIMENTS_FILE="${HERE_DIR}/experiments.txt"
RUNS_FILE="${HERE_DIR}/runs.txt"
export RUN_SCRIPT="${HERE_DIR}/run"

if ! which parallel; then
  echo "ERROR: unable to locate parallel binary (https://www.gnu.org/software/parallel)"
  exit 1
fi

if [ "$#" != "2" ]; then
  echo "USAGE: $0 -j {number-of-workers}"
  exit 1
fi

function run_scenario {
  arg_string=$1
  program="$(echo "${arg_string}" | cut -d" " -f1)"
  scenario="$(echo "${arg_string}" | cut -d" " -f2)"
  rep_num="$(echo "${arg_string}" | cut -d" " -f3)"
  echo "running: ${program}/${scenario}/${rep_num}"
  ${RUN_SCRIPT} ${program} ${scenario} ${rep_num}

}
export -f run_scenario

NUM_WORKERS="$2"

rm -f ${RUNS_FILE}

echo "executing experiments across ${NUM_WORKERS} workers"
while read p; do
  for i in $( eval echo {1..$REPETITIONS})
  do
    echo "$p" "$i" >> ${RUNS_FILE}
  done
done < "${EXPERIMENTS_FILE}"


parallel --keep-order --eta --halt never -j ${NUM_WORKERS} run_scenario {}  < "${RUNS_FILE}"
echo "finished running experiments"
